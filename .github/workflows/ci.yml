name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x, 23.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Show environment info
        run: |
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "OS: ${{ runner.os }}"
          echo "Matrix Node: ${{ matrix.node-version }}"
          
      - name: Install dependencies
        run: npm ci

      - name: Run type checking
        run: npm run type-check

      - name: Run linting
        run: npm run lint

      - name: Run tests
        run: npm run test:ci

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: matrix.node-version == '20.x'
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level moderate

      - name: Run dependency check
        run: npx --yes license-checker --summary

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: Verify build artifacts exist
        run: |
          echo "Checking build output..."
          if [ ! -d ".next" ]; then
            echo "‚ùå Build failed: .next directory does not exist!"
            exit 1
          fi
          if [ -z "$(ls -A .next 2>/dev/null)" ]; then
            echo "‚ùå Build failed: .next directory is empty!"
            exit 1
          fi
          echo "‚úÖ Build verification complete - .next directory exists with content"
          echo "üìÅ Contents of .next directory:"
          ls -la .next/ | head -10

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: build-files-${{ github.run_id }}
          path: |
            .next/
            !.next/cache/
          retention-days: 7
          if-no-files-found: error

  performance:
    name: Performance Analysis
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'pull_request' && needs.build.result == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files-${{ github.run_id }}
          path: ./

      - name: Verify downloaded artifacts
        run: |
          echo "üîç Verifying downloaded build artifacts..."
          if [ ! -d ".next" ]; then
            echo "‚ùå Downloaded artifacts missing: .next directory does not exist!"
            echo "üìÅ Current directory contents:"
            ls -la
            exit 1
          fi
          echo "‚úÖ Downloaded artifacts verified"
          echo "üìÅ .next directory contents:"
          ls -la .next/ | head -10

      - name: Check for bundle analyzer
        id: check_analyzer
        run: |
          if npm run analyze --help &>/dev/null; then
            echo "analyzer_available=true" >> $GITHUB_OUTPUT
          else
            echo "analyzer_available=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Bundle analyzer script not found in package.json"
          fi

      - name: Analyze bundle size
        if: steps.check_analyzer.outputs.analyzer_available == 'true'
        run: npm run analyze
        env:
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: Calculate bundle sizes
        id: bundle_info
        run: |
          echo "üìä Calculating bundle sizes..."
          
          # Basic size calculation
          if [ -d ".next/static" ]; then
            STATIC_SIZE=$(du -sb .next/static 2>/dev/null | cut -f1 || echo "0")
          else
            STATIC_SIZE=0
          fi
          
          if [ -f ".next/BUILD_ID" ]; then
            BUILD_ID=$(cat .next/BUILD_ID)
          else
            BUILD_ID="unknown"
          fi
          
          echo "static_size=$STATIC_SIZE" >> $GITHUB_OUTPUT
          echo "build_id=$BUILD_ID" >> $GITHUB_OUTPUT
          
          echo "üìà Bundle Information:"
          echo "  - Static files size: $(($STATIC_SIZE / 1024)) KB"
          echo "  - Build ID: $BUILD_ID"

      - name: Comment bundle size
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            let comment = `## üìä Bundle Analysis Report\n\n`;
            comment += `**Build Information:**\n`;
            comment += `- Build ID: \`${{ steps.bundle_info.outputs.build_id }}\`\n`;
            comment += `- Static files size: ~${{ steps.bundle_info.outputs.static_size }} bytes\n\n`;
            
            // Check for bundle analyzer report
            const analyzerPath = '.next/analyze/bundle-analyzer-report.json';
            if (fs.existsSync(analyzerPath)) {
              try {
                const analysis = fs.readFileSync(analyzerPath, 'utf8');
                const data = JSON.parse(analysis);
                
                comment += `**Detailed Analysis:**\n`;
                comment += `- Total Bundle Size: ${(data.totalSize / 1024).toFixed(2)} KB\n`;
                comment += `- First Load JS: ${(data.firstLoadJS / 1024).toFixed(2)} KB\n\n`;
              } catch (error) {
                comment += `‚ö†Ô∏è Bundle analyzer report found but could not be parsed\n\n`;
              }
            } else {
              comment += `‚ÑπÔ∏è Detailed bundle analysis not available (analyzer script not configured)\n\n`;
            }
            
            comment += `> üîç This analysis helps track bundle size changes in your PR`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  accessibility:
    name: Accessibility Testing
    runs-on: ubuntu-latest
    needs: [test, build]
    if: needs.build.result == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files-${{ github.run_id }}
          path: ./

      - name: Verify downloaded artifacts
        run: |
          echo "üîç Verifying downloaded build artifacts..."
          if [ ! -d ".next" ]; then
            echo "‚ùå Downloaded artifacts missing: .next directory does not exist!"
            echo "üìÅ Current directory contents:"
            ls -la
            exit 1
          fi
          echo "‚úÖ Downloaded artifacts verified"

      - name: Install accessibility testing tools
        run: |
          npm install -g pa11y wait-on
          echo "‚úÖ Installed pa11y and wait-on globally"

      - name: Start application
        run: |
          echo "üöÄ Starting Next.js application..."
          npm start &
          APP_PID=$!
          echo "Started app with PID: $APP_PID"
          echo $APP_PID > app.pid
          echo "APP_PID=$APP_PID" >> $GITHUB_ENV
        env:
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          PORT: 3000

      - name: Wait for application to be ready
        run: |
          echo "‚è≥ Waiting for application to start on http://localhost:3000..."
          npx wait-on http://localhost:3000 --timeout 120000 --interval 2000
          echo "‚úÖ Application is ready!"

      - name: Run accessibility tests
        run: |
          echo "‚ôø Running accessibility tests..."
          pa11y http://localhost:3000 \
            --reporter json \
            --standard WCAG2AA \
            --timeout 10000 \
            --wait 2000 > accessibility-report.json || {
              echo "‚ö†Ô∏è Accessibility tests completed with issues"
              exit 0
            }
          echo "‚úÖ Accessibility tests completed"

      - name: Process accessibility results
        run: |
          echo "üìã Processing accessibility test results..."
          if [ -f accessibility-report.json ]; then
            ISSUE_COUNT=$(jq '. | length' accessibility-report.json 2>/dev/null || echo "unknown")
            echo "Found $ISSUE_COUNT accessibility issues"
            echo "ACCESSIBILITY_ISSUES=$ISSUE_COUNT" >> $GITHUB_ENV
            
            if [ "$ISSUE_COUNT" != "0" ] && [ "$ISSUE_COUNT" != "unknown" ]; then
              echo "‚ö†Ô∏è Accessibility issues found:"
              jq -r '.[] | "  - \(.message) (Code: \(.code))"' accessibility-report.json | head -10
            fi
          else
            echo "‚ùå Accessibility report not generated"
            echo "ACCESSIBILITY_ISSUES=unknown" >> $GITHUB_ENV
          fi

      - name: Stop application
        if: always()
        run: |
          echo "üõë Stopping application..."
          if [ -f app.pid ]; then
            kill $(cat app.pid) 2>/dev/null || true
            rm app.pid
          fi
          # Also kill any remaining node processes
          pkill -f "npm start" 2>/dev/null || true
          pkill -f "next start" 2>/dev/null || true
          echo "‚úÖ Application stopped"

      - name: Upload accessibility report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-report-${{ github.run_id }}
          path: accessibility-report.json
          retention-days: 30

      - name: Comment accessibility results
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request' && always()
        with:
          script: |
            const fs = require('fs');
            
            let comment = `## ‚ôø Accessibility Test Results\n\n`;
            
            if (fs.existsSync('accessibility-report.json')) {
              try {
                const report = fs.readFileSync('accessibility-report.json', 'utf8');
                const issues = JSON.parse(report);
                
                if (issues.length === 0) {
                  comment += `‚úÖ **No accessibility issues found!**\n\n`;
                  comment += `Your application passed all WCAG 2.1 AA accessibility tests.`;
                } else {
                  comment += `‚ö†Ô∏è **Found ${issues.length} accessibility issue(s)**\n\n`;
                  comment += `**Summary of issues:**\n`;
                  
                  const summary = {};
                  issues.forEach(issue => {
                    const code = issue.code || 'unknown';
                    summary[code] = (summary[code] || 0) + 1;
                  });
                  
                  Object.entries(summary).forEach(([code, count]) => {
                    comment += `- \`${code}\`: ${count} occurrence(s)\n`;
                  });
                  
                  comment += `\nüìÑ Full accessibility report available in build artifacts.`;
                }
              } catch (error) {
                comment += `‚ùå **Error processing accessibility results**\n\n`;
                comment += `Could not parse accessibility report. Check the build logs for details.`;
              }
            } else {
              comment += `‚ùå **Accessibility tests could not be completed**\n\n`;
              comment += `No accessibility report was generated. Check the build logs for details.`;
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Summary job that depends on all others
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [test, security, build, performance, accessibility]
    if: always()
    
    steps:
      - name: Check all job results
        run: |
          echo "üìä CI/CD Pipeline Summary:"
          echo "========================="
          echo "Test: ${{ needs.test.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Performance: ${{ needs.performance.result }}"
          echo "Accessibility: ${{ needs.accessibility.result }}"
          echo "========================="
          
          # Fail if critical jobs failed
          if [[ "${{ needs.test.result }}" == "failure" || "${{ needs.build.result }}" == "failure" ]]; then
            echo "‚ùå Critical jobs failed"
            exit 1
          fi
          
          echo "‚úÖ Pipeline completed successfully"
